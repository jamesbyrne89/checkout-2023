import { useCallback, useEffect } from "react";

import { Button } from "components/Button";
import { Comment } from "components/LatestComments/LatestComments";
import { FieldValues } from "react-hook-form/dist/types";
import Head from "next/head";
import { Page } from "components/Page";
import { StarRating } from "components/StarRating";
import { TextArea } from "components/TextArea";
import { TextInput } from "components/TextInput";
import isEmail from "validator/lib/isEmail";
import styles from "../styles/Home.module.scss";
import { useForm } from "react-hook-form";
import { useLocalStorage } from "hooks/useLocalStorage";
import { useRouter } from "next/router";

export default function Home() {
  const router = useRouter();
  const [currentFeedback, setCurrentFeedback] = useLocalStorage<Comment[]>(
    "feedback",
    []
  );
  const {
    register,
    handleSubmit,
    formState,
    watch,
    setFocus,
    setError,
    setValue,
    clearErrors,
    trigger,
  } = useForm({
    mode: "onBlur",
    defaultValues: {
      fullName: "",
      email: "",
      starRating: 0,
      comments: "",
    },
  });

  const onSubmit = (formData: FieldValues) => {
    const { email, fullName, starRating, comments } = formData;

    if (!starRating) {
      setError("starRating", {
        message: "You must provide a rating",
      });
      return;
    }

    const newFeedback: Comment = {
      email,
      fullName,
      rating: starRating,
      text: comments,
      submittedUtc: new Date().toISOString(),
    };

    setCurrentFeedback([...currentFeedback, newFeedback]);
    router.push("/submitted");
  };

  const onStarRatingChange = useCallback(
    (val: number) => {
      setValue("starRating", val);
      clearErrors("starRating");
      trigger("starRating");
    },
    [trigger, clearErrors, setValue]
  );

  const starRating = watch("starRating");

  useEffect(() => {
    setFocus("fullName", { shouldSelect: true });
  }, [setFocus]);

  return (
    <>
      <Head>
        <title>Submit feedback</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Page>
        <h1>Submit your feedback</h1>
        <p className={styles.formInstructions}>
          Fields marked with * are required
        </p>
        <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
          <div>
            <div className={styles.inputWrapper}>
              <TextInput
                label="Full name"
                id="input-full-name"
                required
                {...register("fullName", {
                  required: "Full name is required",
                })}
                errorMessage={formState.errors.fullName?.message?.toString()}
              />
            </div>
            <div className={styles.inputWrapper}>
              <TextInput
                label="Email"
                id="input-email"
                required
                {...register("email", {
                  validate: (val) => isEmail(val) || "Must be a valid email",
                })}
                errorMessage={formState.errors.email?.message?.toString()}
              />
            </div>
            <div className={styles.inputWrapper}>
              <StarRating
                onSelectionChange={onStarRatingChange}
                errorMessage={formState.errors.starRating?.message?.toString()}
                onBlur={(e) => {
                  // Don't error if user is still focused on stars
                  if (
                    !e.relatedTarget?.id.includes("input-stars-") &&
                    !starRating
                  ) {
                    setError("starRating", {
                      message: "You must provide a rating",
                    });
                  }
                }}
              />
            </div>
          </div>
          <div>
            <div className={styles.inputWrapper}>
              <TextArea
                label="Comments"
                id="input-comments"
                placeholder="Tell us what you thought"
                required
                {...register("comments", {
                  required: "Comments are required",
                })}
                errorMessage={formState.errors.comments?.message?.toString()}
              />
            </div>
            <div className={styles.submitBtn}>
              <Button label="Submit" disabled={!formState.isValid} />
            </div>
          </div>
        </form>
      </Page>
    </>
  );
}
